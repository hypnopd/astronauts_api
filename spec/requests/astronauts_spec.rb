require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/astronauts", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Astronaut. As you add validations to Astronaut, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # AstronautsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {}
  }

  describe "GET /index" do
    it "renders a successful response" do
      Astronaut.create! valid_attributes
      get astronauts_url, headers: valid_headers, as: :xml
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      astronaut = Astronaut.create! valid_attributes
      get astronaut_url(astronaut), as: :xml
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Astronaut" do
        expect {
          post astronauts_url,
               params: { astronaut: valid_attributes }, headers: valid_headers, as: :xml
        }.to change(Astronaut, :count).by(1)
      end

      it "renders a xml response with the new astronaut" do
        post astronauts_url,
             params: { astronaut: valid_attributes }, headers: valid_headers, as: :xml
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/xml"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Astronaut" do
        expect {
          post astronauts_url,
               params: { astronaut: invalid_attributes }, as: :xml
        }.to change(Astronaut, :count).by(0)
      end

      it "renders a xml response with errors for the new astronaut" do
        post astronauts_url,
             params: { astronaut: invalid_attributes }, headers: valid_headers, as: :xml
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/xml"))
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested astronaut" do
        astronaut = Astronaut.create! valid_attributes
        patch astronaut_url(astronaut),
              params: { astronaut: new_attributes }, headers: valid_headers, as: :xml
        astronaut.reload
        skip("Add assertions for updated state")
      end

      it "renders a xml response with the astronaut" do
        astronaut = Astronaut.create! valid_attributes
        patch astronaut_url(astronaut),
              params: { astronaut: new_attributes }, headers: valid_headers, as: :xml
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/xml"))
      end
    end

    context "with invalid parameters" do
      it "renders a xml response with errors for the astronaut" do
        astronaut = Astronaut.create! valid_attributes
        patch astronaut_url(astronaut),
              params: { astronaut: invalid_attributes }, headers: valid_headers, as: :xml
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/xml"))
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested astronaut" do
      astronaut = Astronaut.create! valid_attributes
      expect {
        delete astronaut_url(astronaut), headers: valid_headers, as: :xml
      }.to change(Astronaut, :count).by(-1)
    end
  end

  describe 'GET /export' do
    let(:astronauts) { create_list(:astronaut, 5000000)}

    it 'exports XML file' do
      get export_astronauts_url
      expect(response.headers['Content-Disposition']).to eq 'attachment; filename="astronauts.xml"; filename*=UTF-8\'\'astronauts.xml'
    end
  end
end
